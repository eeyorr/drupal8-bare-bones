/**
 * Convert font-size from px to rem with px fallback
 *
 * @param $size - the value in pixels (without px suffix) that you want to convert
 *
 * e.g. p {@include fontSize(12);} 
 *
 */
.skip-link {
  margin: 0; }
  .skip-link a,
  .skip-link a:visited {
    display: block;
    width: 100%;
    padding: 2px 0 3px;
    text-align: center;
    color: #fff; }

.main-content {
  outline: none; }

* {
  box-sizing: border-box;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box; }

html {
  font-size: 100%;
  line-height: 1.5;
  min-height: 100%;
  text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

img,
picture,
object,
figure,
input,
svg {
  max-width: 100%;
  height: auto; }

pre {
  white-space: pre-wrap;
  overflow-x: auto; }

p,
pre {
  margin: 0; }

em,
i {
  font-style: italic; }

blockquote {
  font-style: italic; }

strong,
b {
  font-weight: bold; }

sup {
  font-size: 50%;
  line-height: 0;
  vertical-align: super; }

sub {
  font-size: 50%;
  line-height: 0;
  vertical-align: sub; }

ul.tabs {
  border-bottom: 1px solid #ccc; }

ul.contextual-links li {
  display: block !important;
  float: none !important;
  position: relative !important; }

.contextual-links a {
  color: #000 !important; }
  .contextual-links a:hover {
    color: #000 !important;
    text-decoration: underline !important; }

.menu-item--expanded,
.menu-item--collapsed {
  list-style-type: none;
  list-style-image: none; }

.node--unpublished {
  background-color: #fff4f4; }

.layout-container {
  margin: 2rem 0; }

.container {
  max-width: 68.75em;
  margin: 0 auto; }

.region {
  outline: 1px dotted blue;
  padding: 1rem 0; }

@media (max-width: 68.75em) {
  .container {
    margin: 0 1.25rem; } }

/**
 * @file
 * Print styling
 */
/**
 * By importing this CSS file as media "all", we allow this print file to be
 * aggregated with other stylesheets, for improved front-end performance.
 */
@media print {
  body {
    padding-top: 0 !important;
    color: #000; }
  /* Underline all links. */
  a,
  a:link,
  a:visited {
    color: #000 !important;
    text-decoration: underline !important; }
  main {
    /* Add visible URL after links. */
    /* Only display useful links. */
    /* Add visible title after abbreviations. */ }
    main a[href]:after {
      color: #000 !important;
      content: " (" attr(href) ")" !important; }
    main a[href^="javascript:"]:after,
    main a[href^="#"]:after {
      content: ""; }
    main abbr[title]:after {
      content: " (" attr(title) ")"; }
  /* Turn off any background colors or images. */
  header,
  body,
  #main-content {
    color: #000;
    background-color: transparent !important;
    background-image: none !important; }
  /* Hide sidebars and nav elements. */
  .skip-link,
  #toolbar-administration,
  .toolbar,
  nav,
  footer,
  iframe,
  .trigger,
  .breadcrumb,
  .tabs,
  .pager,
  .feed-icons {
    visibility: hidden;
    display: none; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
